name: Build and Push Docker Image to AWS ECR

on:
  push:
    branches:
      - main  

jobs:
  
  test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'  # Specify the Node.js version you want

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run the unit tests
      - name: Run tests
        run: NODE_ENV=test npm test
  build--image-scan--DAST--and-push-to-ecr:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for the job
    needs: test
    steps:
    - name: Check out the repository
      uses: actions/checkout@v2  # Checkout the code from the repository

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  # Optional: Set the region from secrets

    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1  # Login to AWS ECR
     # with:
     #   region: ${{ secrets.AWS_REGION }}  # Set your AWS region (e.g., ap-northeast-2)

    - name: Build Docker image
      run: |
        docker build -t dummy-nodejs-app .  # Build Docker image with the tag 'my-app'
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@0.28.0
      with:
          image-ref: 'dummy-nodejs-app'
          format: 'table'
     #     exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
    - name: Run App
      run: |
        docker run -d -p 3000:3000 dummy-nodejs-app:latest

    - name: Wait for application to be ready
      run: |
        sleep 30  # Wait for the application to fully start up (adjust time as needed)

    - name: Run OWASP ZAP for DAST
      uses: zaproxy/action-full-scan@v0.12.0
      with:
        target: 'http://localhost:3000'  # Replace with the port of your Docker container
#        api-key: ${{ secrets.ZAP_API_KEY }}  # Optional: Set API key if using ZAP's API
#       start-options: '-config api.disablekey=true'          
    - name: Tag Docker image
      run: |
        docker tag dummy-nodejs-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest  # Tag with ECR repository URI

    - name: Push Docker image to Amazon ECR
      run: |
        docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest  # Push the tagged image to ECR
# Job 2: Deploy the latest Docker image to ECS
  deploy-to-ecs:
    runs-on: ubuntu-latest  # Use the latest Ubuntu runner for this job
    needs: build--image-scan--DAST--and-push-to-ecr   # This job will run after the build-and-push job is successful

    steps:
    - name: Check out the repository
      uses: actions/checkout@v2

    - name: Set up AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}  # Set your AWS region from secrets

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: nodejs-app-task-definition.json  # Path to your ECS task definition file
        container-name: introduction # Name of the container inside the ECS task definition
        image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest # Image URL in ECR

    - name: Deploy to Amazon ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}  # Task definition output from previous step
        service: frontend  # ECS service name
        cluster: Yoma-ECS  # ECS cluster name
        wait-for-service-stability: true  # Wait for th        
