name: DevSecOps CI/CD Pipeline for Containerized Application

on:
  push:
    branches:
      - main  # Trigger the pipeline on push to main branch
  pull_request:
    branches:
      - main  # Trigger on PR to main branch

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Checkout the code from the repository
    - name: Checkout code
      uses: actions/checkout@v2

    # Set up Docker Buildx for multi-platform builds
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    # Log in to Docker Hub or ECR
    - name: Log in to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1
      with:
        region: ap-northeast-2

    # Build Docker image
    - name: Build Docker image
      run: |
        docker build -t ${{ secrets.AWS_ECR_REGISTRY }}/dummy-app:$GITHUB_SHA .
      
    # Push Docker image to ECR or Docker Hub
    - name: Push Docker image to ECR
      run: |
        docker push ${{ secrets.AWS_ECR_REGISTRY }}/dummy-app:$GITHUB_SHA

    # Run SAST - Static Application Security Testing
    - name: Run SAST scan (Static Analysis)
      uses: github/super-linter@v4
      with:
        run: true

    # Run DAST - Dynamic Application Security Testing
    - name: Run DAST scan (Dynamic Analysis)
      run: |
        # Assuming you're using a container vulnerability scanner like OWASP ZAP or similar
        docker run --rm -v $(pwd):/zap/wrk/ owasp/zap2docker-stable zap-baseline.py -t http://localhost:3000

    # Run Unit Tests
    - name: Run tests
      run: |
        npm test

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    # Log in to AWS ECS
    - name: Log in to AWS
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
          task-definition: nodejs-app-task-definition.json 
          container-name: nodejs-app
          image: 666265053366.dkr.ecr.ap-northeast-2.amazonaws.com/interview/introduction:latest    
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: introduction-svc
          cluster: lab
          wait-for-service-stability: true
