name: YomaFleet-DevSecOps-Assessment-for_ThurainOo
on:
  push:
    branches:
      - main

jobs:
  SAST_and_Unit_test:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 4: Run SonarQube scan
      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: .
          args: >
            -Dsonar.organization=yoma-fleet
            -Dsonar.projectKey=dummy-nodejs-app
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      # Step 5: Check SonarQube Quality Gate
      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 5
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}

      - name: Display SonarQube Quality Gate Status
        run: echo "The Quality Gate status is ${{ steps.sonarqube-quality-gate-check.outputs.quality-gate-status }}"

      # Step 6: Run unit tests
      - name: Run tests
        run: NODE_ENV=test npm test

  build-image-and-push-to-ecr:
    runs-on: ubuntu-latest
    needs: SAST_and_Unit_test
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Log in to Amazon ECR
      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build Docker image
      - name: Build Docker image
        run: docker build -t dummy-nodejs-app .

      # Step 5: Scan Docker image for vulnerabilities
      - name: Trivy Vulnerability Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: dummy-nodejs-app
          format: table
          ignore-unfixed: true
          vuln-type: os,library
          severity: CRITICAL,HIGH

      # Step 6: Run application for DAST
      - name: Run application
        run: docker run -d -p 3000:3000 dummy-nodejs-app:latest

      - name: Wait for application to start
        run: sleep 30

      # Step 7: Run OWASP ZAP for DAST
      - name: Run OWASP ZAP
        uses: zaproxy/action-full-scan@v0.12.0
        with:
          target: http://localhost:3000
          token: ${{ secrets.ZAP_API_KEY }}

      # Step 8: Tag Docker image
      - name: Tag Docker image
        run: docker tag dummy-nodejs-app:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest

      # Step 9: Push Docker image to Amazon ECR
      - name: Push Docker image to Amazon ECR
        run: docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest

  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs: build-image-and-push-to-ecr
    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Update ECS task definition
      - name: Render ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: nodejs-app-task-definition.json
          container-name: introduction
          image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/introduction:latest

      # Step 4: Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: frontend
          cluster: Yoma-ECS
          wait-for-service-stability: true
